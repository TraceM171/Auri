package com.auri.extensions.collection

import arrow.core.Either
import arrow.core.raise.catch
import arrow.core.raise.either
import arrow.core.raise.ensure
import co.touchlab.kermit.Logger
import com.auri.core.collection.InfoProvider
import com.auri.core.common.util.HashAlgorithms
import io.ktor.client.*
import io.ktor.client.plugins.*
import io.ktor.client.request.*
import io.ktor.client.request.forms.*
import io.ktor.client.statement.*
import io.ktor.http.*
import kotlinx.coroutines.delay
import kotlinx.datetime.LocalDate
import kotlinx.datetime.toKotlinLocalDate
import kotlinx.serialization.json.*
import java.net.URI
import java.net.URL
import kotlin.time.Duration
import kotlin.time.Duration.Companion.seconds
import kotlin.time.TimeMark
import kotlin.time.TimeSource

class MalwareBazaarInfoProvider(
    definition: Definition
) : InfoProvider {
    override val name: String = definition.customName
    override val description: String = """
        Get sample info from MalwareBazaar by searching for hash.
        Limitations:
        - None
    """.trimIndent()
    override val version: String = "0.0.1"

    data class Definition(
        val customName: String = "MalwareBazaar",
        val endpointUrl: URL = URI.create("https://mb-api.abuse.ch/api/v1").toURL(),
        val authKey: String,
        val requestCooldown: Duration = 1.seconds,
    )

    override suspend fun sampleInfoByHash(getHashValue: (HashAlgorithms) -> String): com.auri.core.collection.SampleInfo? {
        val hash = getHashValue(HashAlgorithms.SHA256)
        val sampleInfo = api.sampleInfo(hash)
            .onLeft { Logger.e(it) }
            .getOrNull() ?: return null
        return com.auri.core.collection.SampleInfo(
            hashMatched = hash,
            malwareFamily = sampleInfo.malwareFamily,
            extraInfo = buildMap {
                set("firstSeen", sampleInfo.firstSeen.toString())
                sampleInfo.lastSeen?.let { set("lastSeen", it.toString()) }
                sampleInfo.originCountry?.let { set("originCountry", it) }
                sampleInfo.malwareFamily?.let { set("malwareFamily", it) }
                sampleInfo.deliveryMethod?.let { set("deliveryMethod", it) }
            }
        )
    }

    private val api = Api(
        endpointUrl = definition.endpointUrl,
        authKey = definition.authKey,
        requestCooldown = definition.requestCooldown
    )

    private class Api(
        private val endpointUrl: URL,
        private val authKey: String,
        private val requestCooldown: Duration
    ) : AutoCloseable {
        private var lastRequestMark: TimeMark? = null

        private val client = HttpClient {
            install(DefaultRequest) {
                url {
                    takeFrom(endpointUrl)
                }
                headers {
                    header("Auth-Key", authKey)
                }
            }
        }

        suspend fun sampleInfo(
            hash: String
        ): Either<String, SampleInfo?> = either {
            throttleApi()
            val response = client.submitForm(
                formParameters = parameters {
                    append("query", "get_info")
                    append("hash", hash)
                }
            )
            lastRequestMark = TimeSource.Monotonic.markNow()
            ensure(response.status.isSuccess()) {
                "Failed to get sample info: ${response.status}"
            }

            catch(
                {
                    val data = Json.decodeFromString<JsonObject>(response.bodyAsText())["data"]
                        ?.jsonArray
                        ?.first()
                        ?.jsonObject
                        ?: return@either null
                    SampleInfo(
                        firstSeen = data["first_seen"]!!.jsonPrimitive.content.substringBeforeLast(" ")
                            .let { java.time.LocalDate.parse(it).toKotlinLocalDate() },
                        lastSeen = data["last_seen"]!!.takeUnless { it is JsonNull }
                            ?.jsonPrimitive?.content?.substringBeforeLast(" ")
                            ?.let { java.time.LocalDate.parse(it).toKotlinLocalDate() },
                        originCountry = data["origin_country"]!!.takeUnless { it is JsonNull }
                            ?.jsonPrimitive?.content,
                        malwareFamily = data["signature"]!!.takeUnless { it is JsonNull }
                            ?.jsonPrimitive?.content,
                        deliveryMethod = data["delivery_method"]!!.takeUnless { it is JsonNull }
                            ?.jsonPrimitive?.content,
                    )
                },
                {
                    raise("Failed to parse sample info: $it")
                }
            )
        }

        private suspend fun throttleApi() {
            val timeSinceLastRequest = lastRequestMark?.elapsedNow() ?: Duration.INFINITE
            val remainingDelay = (requestCooldown - timeSinceLastRequest)
            delay(remainingDelay)
        }

        override fun close() {
            client.close()
        }

        data class SampleInfo(
            val firstSeen: LocalDate,
            val lastSeen: LocalDate?,
            val originCountry: String?,
            val malwareFamily: String?,
            val deliveryMethod: String?
        )
    }
}